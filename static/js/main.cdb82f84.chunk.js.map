{"version":3,"sources":["inbox/message-table-definition.tsx","inbox/inbox.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["formatTime","timeFormat","columns","title","dataIndex","width","ellipsis","sorter","compare","a","b","message","localeCompare","multiple","render","value","record","timestamp","Search","Inbox","useState","isDrawerVisible","setDrawerVisible","selectedRow","setSelectedRow","length","i","recipients","names","Math","ceil","random","randomWords","min","max","join","randomTimeStamp","key","toString","push","generateFakeData","data","useEffect","className","placeholder","enterButton","size","onSearch","console","log","onRow","onClick","dataSource","onChange","placement","closable","onClose","visible","Header","Footer","Sider","Content","Home","Contact","App","modalVisible","setModalVisible","breakpoint","collapsedWidth","onBreakpoint","broken","onCollapse","collapsed","type","shape","icon","PlusOutlined","theme","mode","defaultSelectedKeys","Item","to","UserOutlined","VideoCameraOutlined","style","padding","margin","minHeight","path","textAlign","onOk","onCancel","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.cdb82f84.chunk.js","sourcesContent":["import {ColumnProps} from \"antd/lib/table\";\nimport {ITMessage} from \"../constants\";\nimport randomTimeStamp from 'random-timestamps';\nimport randomWords from 'random-words';\nimport { names } from 'unique-names-generator';\nimport { timeFormat} from 'd3-time-format';\n\nconst formatTime = timeFormat(\"%B %d, %Y\");\n\nexport const columns: ColumnProps<ITMessage>[] = [\n    {\n        title: 'Recipients',\n        dataIndex: 'recipients',\n        width: '20%'\n    },\n    {\n        title: 'Message',\n        dataIndex: 'message',\n        ellipsis: true,\n        sorter: {\n            compare: (a, b) => a.message.localeCompare(b.message),\n            multiple: 1\n        }\n    },\n    {\n        title: 'sent',\n        width: '20%',\n        dataIndex: 'timestamp',\n        render: (value, record) => formatTime(record.timestamp),\n        sorter: {\n            compare: (a, b) => a.timestamp - b.timestamp,\n            multiple: 2,\n        },\n    }\n];\n\n\n\ninterface Keyed {\n    key: string\n}\n\nexport function generateFakeData(length: number): (ITMessage & Keyed)[] {\n    const a: (ITMessage & Keyed)[] = [];\n    for (let i = 0; i < length; i++) {\n        const recipients = [names[Math.ceil(Math.random() * names.length)]];\n        const message = randomWords({ min: 5, max: 30 }).join(' ');\n        const timestamp = randomTimeStamp() * 1000;\n        const key = i.toString();\n        a.push({key, recipients, message, timestamp});\n    }\n    return a;\n}\n","import React, {useEffect, useState} from 'react'\nimport {Table, Input, Drawer} from \"antd\";\nimport {columns, generateFakeData} from \"./message-table-definition\";\n\nconst { Search } = Input;\nexport const Inbox = () => {\n    const [isDrawerVisible, setDrawerVisible] = useState(false);\n    const [selectedRow, setSelectedRow] = useState<any>(null);\n\n    const [data, setData] = useState(generateFakeData(10));\n    useEffect(() => { }, []); // potentially load there\n    return (\n    <div className='inbox'>\n        <Search\n            placeholder=\"input search text\"\n            enterButton=\"Search\"\n            size=\"large\"\n            onSearch={value => console.log(value)}/>\n        <Table columns={columns}\n               onRow={(record) => ({\n                   onClick: () => {\n                       setSelectedRow(record);\n                       setDrawerVisible(true);\n                   },\n               })}\n               dataSource={data}\n               onChange={() => {}} />\n        <Drawer\n            title={`Message with ${selectedRow && selectedRow.recipients}`}\n            placement=\"right\"\n            closable={false}\n            width={'40%'}\n            onClose={() => setDrawerVisible(false)}\n            visible={isDrawerVisible}\n        >\n            {selectedRow && selectedRow!.message}\n        </Drawer>\n\n    </div>);\n}\n\n","import './App.less';\nimport React, {useState} from 'react';\nimport {Layout, Menu, Button, Modal} from \"antd\";\nimport { UploadOutlined, UserOutlined, VideoCameraOutlined, PlusOutlined } from '@ant-design/icons';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useParams\n} from 'react-router-dom';\nimport {Inbox} from \"./inbox/inbox\";\nconst { Header, Footer, Sider, Content } = Layout;\nconst Home = () => <span> Home</span>;\nconst Contact = () => <span> Home</span>;\n\nfunction App() {\n    const [modalVisible, setModalVisible] = useState(false);\n    return (\n        <Router>\n            <Layout>\n                <Sider\n                    breakpoint=\"lg\"\n                    collapsedWidth=\"0\"\n                    onBreakpoint={broken => {\n                        console.log(broken);\n                    }}\n                    onCollapse={(collapsed, type) => {\n                        console.log(collapsed, type);\n                    }}\n                >\n                    <div className=\"logo\">Instatext</div>\n                    <div className='main-nav'>\n                        <Button onClick={() => setModalVisible(true)}\n                            className='add-message' type=\"primary\" shape=\"round\" icon={<PlusOutlined />}>\n                            Add new message\n                        </Button>\n                        <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n                            <Menu.Item key=\"1\">\n                                <Link to='/inboc'>\n                                    <UserOutlined />\n                                    <span className=\"nav-text\">Inbox</span>\n                                </Link>\n                            </Menu.Item>\n                            <Menu.Item key=\"2\">\n                                <Link to='/contact'>\n                                    <VideoCameraOutlined />\n                                    <span className=\"nav-text\">Contacts</span>\n                                </Link>\n                            </Menu.Item>\n                        </Menu>\n                    </div>\n                    <Link to='/admin'>\n                        <div className='bottom-nav'>\n                            Manage Account\n                        </div>\n                    </Link>\n                </Sider>\n                <Layout>\n                    <Header className=\"site-layout-sub-header-background\" style={{ padding: 0 }} />\n                    <Content style={{ margin: '24px 16px 0' }}>\n                        <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\n                            <Switch>\n                                <Route path=\"/inbox\"/>\n                                <Inbox/>\n                                <Route path=\"/contact\">\n                                    <Contact />\n                                </Route>\n                                <Route path=\"/\">\n                                    <Home />\n                                </Route>\n                            </Switch>\n                        </div>\n                    </Content>\n                    <Footer style={{ textAlign: 'center' }}>I.T System Prod M.C D.C ©2021</Footer>\n                </Layout>\n            </Layout>\n            <Modal\n                title=\"Send a new message\"\n                visible={modalVisible}\n                onOk={() => setModalVisible(false)}\n                onCancel={() => setModalVisible(false)}\n            >\n                <p>Form todo</p>\n            </Modal>\n        </Router>\n    );\n}\n\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}